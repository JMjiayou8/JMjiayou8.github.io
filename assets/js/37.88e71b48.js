(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{420:function(e,t,n){"use strict";n.r(t);var l=n(44),a=Object(l.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("工作需要使用 mxGraph 绘制流程图。旧系统使用 0.99.0.7 版本，最新版本 3.9.12。并且是融入 vue 项目。摸索中前行。首先，我下载了官方例子，每个例子都运行一遍，按照功能分类整理。其次，根据新系统设计图，统计功能点，再去研究旧系统，看使用方法。大概有个数。")]),e._v(" "),n("blockquote",[n("p",[e._v("参考地址")])]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://jgraph.github.io/mxgraph/docs/js-api/files/index-txt.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("API"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://jgraph.github.io/mxgraph/javascript/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("在线例子"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/jgraph/mxgraph",target:"_blank",rel:"noopener noreferrer"}},[e._v("github 地址"),n("OutboundLink")],1)])]),e._v(" "),n("blockquote",[n("p",[e._v("功能点、遇到的问题及解决方法")])]),e._v(" "),n("ol",[n("li",[e._v("因为是 vue 项目中使用，我网上搜索，没有得到什么有效信息。npm 引入的方式无效，只好按照静态文件的方式引入。")])]),e._v(" "),n("ul",[n("li",[e._v("下载"),n("a",{attrs:{href:"https://github.com/jgraph/mxgraph/tree/master/javascript/src",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码"),n("OutboundLink")],1),e._v(",放入项目 static 目录中。")]),e._v(" "),n("li",[e._v("index.html 中引入,文件路径与 webpack 配置 assetsSubDirectory、assetsPublicPath 有关。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//config/index.js\n...\ndev: {\n    assetsSubDirectory: 'assets',\n    assetsPublicPath: '/bpm_web_app',\n    ...\n}\n...\nbuild: {\n    ...\n    assetsSubDirectory: 'assets',\n    assetsPublicPath: '/bpm_web_app/',\n    ...\n}\n...\n\n\n//index.html\n...\n<body>\n    <div id=\"app\"></div>\n    <script>\n      mxBasePath = '/bpm_web_app/assets/src';\n    <\/script>\n    <script src=\"/bpm_web_app/assets/src/js/mxClient.js\"><\/script>\n</body>\n...\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("新建 vue 文件，初始化模板如下")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n    <div id="graph"></div>\n</template>\n<script>\nexport default {\n    data() {\n        return{\n            graph:null\n        }\n    },\n    mounted() {\n        this.main(document.getElementById("graph"));\n    },\n    methods:{\n        main(container){\n            let self = this;\n            if (!mxClient.isBrowserSupported()) {\n                mxUtils.error("Browser is not supported!", 200, false);\n            } else {\n                self.graph = new mxGraph(container)\n                // 启动更新事务\n                self.graph.getModel().beginUpdate();\n                try {\n                    //具体绘制代码\n                } finally {\n                    self.graph.getModel().endUpdate();\n                }\n            }\n        }\n\n    }\n}\n<\/script>\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("修改默认样式")])]),e._v(" "),n("ul",[n("li",[e._v("关键属性"),n("a",{attrs:{href:"https://jgraph.github.io/mxgraph/docs/js-api/files/util/mxConstants-js.html#mxConstants",target:"_blank",rel:"noopener noreferrer"}},[e._v("mxConstants"),n("OutboundLink")],1)])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('setDefaultStyle() {\n    let self = this;\n    //节点样式\n    let vertexStyle=self.graph.getStylesheet().getDefaultVertexStyle();\n    vertexStyle[mxConstants.STYLE_SHAPE]=mxConstants.SHAPE_IMAGE;\n    vertexStyle[mxConstants.STYLE_VERTICAL_LABEL_POSITION] = mxConstants.ALIGN_MIDDLE;\n    vertexStyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n    vertexStyle[mxConstants.STYLE_FONTCOLOR] = "#000";\n    //连接线样式\n    let edgeStyle=self.graph.getStylesheet().getDefaultEdgeStyle();\n    edgeStyle[mxConstants.STYLE_STARTARROW]=mxConstants.ARROW_OVAL;\n    edgeStyle[mxConstants.STYLE_STROKECOLOR] ="#666";\n    edgeStyle[mxConstants.STYLE_DASHED] = true; //设置虚线\n},\n')])])]),n("ol",{attrs:{start:"4"}},[n("li",[e._v("mxEditor 配置节点属性")])]),e._v(" "),n("ul",[n("li",[e._v("使用")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//1⃣️官网使用如下方法获取mxEditor配置信息，但实践无效，未深究。\n️let root = mxUtils.load('config/graphConfig.xml').getDocumentElement();\n\n\n//2⃣我将配置信息存储到js中,然后通过以下方式获取并配置。\nimport { graphConfig } from \"@/assets/utils/graphConfig\";\n\n\nlet root = mxUtils.parseXml(graphConfig).documentElement;\n\n\nself.editor = new mxEditor(root);\nself.graph = new mxGraph(container,self.editor.graph.model);\n")])])]),n("ul",[n("li",[e._v('mxEditor 配置如下，templates 中配置节点和连线的基础结构，可包含属性和样式。在拖拽方法中通过 self.editor.templates["xxx"]获取。')])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<mxEditor defaultGroup="group" defaultEdge="connector">\n\t<Array as="templates">\n\t    \x3c!--连线设置--\x3e\n\t\t<add as="connector">\n\t\t\t<Connector  href="" cellType=\'connector\' lineName=\'\'  lineLeftValue=\'\' lineOperator=\'\' lineRightValue=\'\'>\n\t\t\t\t<mxCell style="straight;strokeWidth=0.5" >\n\t\t\t\t\t<mxGeometry as="geometry" relative="1" />\n\t\t\t\t</mxCell>\n\t\t\t</Connector>\n\t\t</add>\n\t\t\x3c!--节点设置--\x3e\n\t\t<add as="start">\n\t\t\t<Roundrect  href="" cellType=\'start\' activityId=\'start\' activityName=\'开始\'>\n\t\t\t\t<mxCell vertex="1" style="rounded">\n\n\t\t\t\t\t<mxGeometry as="geometry" width="32" height="32"/>\n\t\t\t\t</mxCell>\n\t\t\t</Roundrect>\n\t\t</add>\n\t\t...\n\t</Array>\n\t<mxGraph as="graph" alternateEdgeStyle="verticalConnector" allowLoops="1" dropEnabled="1">\n\t\t<mxGraphModel as="model">\n\t\t\t<root>\n\t\t\t\t<Diagram processName="My Process">\n\t\t\t\t\t<mxCell/>\n\t\t\t\t</Diagram>\n\t\t\t\t<Layer processId="Default Layer" id="1">\n\t\t\t\t\t<mxCell parent="0"/>\n\t\t\t\t</Layer>\n\t\t\t</root>\n\t\t</mxGraphModel>\n\t</mxGraph>\n</mxEditor>\n')])])]),n("ol",{attrs:{start:"5"}},[n("li",[e._v("我遇到的第一问题便是拖拽自定义图标。")])]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://jgraph.github.io/mxgraph/docs/js-api/files/util/mxUtils-js.html#mxUtils.makeDraggable",target:"_blank",rel:"noopener noreferrer"}},[e._v("核心方法 makeDraggable"),n("OutboundLink")],1),e._v("function( element,graphF,funct,dragElement,dx,dy,autoscroll,scalePreview,highlightDropTargets,getDropTarget)")]),e._v(" "),n("li",[e._v("mxGraph 中节点设置属性，该节点只可以是 xml 格式，所以初始版本我创建 xml 节点并设置属性")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let dragFunct = function(graph, evt, target, x, y) {\n    var doc = mxUtils.createXmlDocument();\n\n    var cell = doc.createElement(type);\n    cell.setAttribute("name", title);\n    cell.setAttribute("type", type);\n    cell.setAttribute("dragId", dragId);\n    self.graph.insertVertex(\n        self.processData ? graph.getDefaultParent() : self.parent,\n        null,\n        cell,\n        x,\n        y,\n        40,\n        40,\n        "image=" + require("@/assets/images/" + dragId + ".png") + ";"\n    );\n};\n')])])]),n("ul",[n("li",[e._v("但是创建 xml 节点的方式貌似并不适用于创建连接线，因为连接线需要设置起止点坐标。多方研究后，采取 mxEditor 配置的方式，同时修改节点拖拽")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let dragFunct = function(graph, evt, target, x, y) {\n    if (type == "line") {\n      var cell = self.editor.templates["connector"];\n      //设置连线起止点相对坐标\n      cell.geometry.setTerminalPoint(new mxPoint(0, 50), true);\n      cell.geometry.setTerminalPoint(new mxPoint(50, 0), false);\n      cell.edge = true;\n    } else {\n      var cell = self.editor.templates[type];\n      cell.setStyle(\n        "image=" +\n          require("@/assets/images/" + imgMap[`${type}`] + "-finish.png") +\n          ";"\n      );\n      cell.vertex = true;\n    }\n    let cells = graph.importCells([cell], x, y, target);\n    if (cells != null && cells.length > 0) {\n      self.graph.scrollCellToVisible(cells[0]);\n      self.graph.setSelectionCells(cells);\n    }\n};\n')])])]),n("ul",[n("li",[e._v("完整代码如下")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//设置图标拖拽\nsetDragItem(title, type) {\n      let self = this;\n      //拖拽图标源\n      let img = document.getElementById(\'icon\');\n      if (mxClient.IS_IE) {\n        mxEvent.addListener(img, "dragstart", function(evt) {\n          evt.returnValue = false;\n        });\n      }\n      let graphF = function(evt) {\n        let x = mxEvent.getClientX(evt);\n        let y = mxEvent.getClientY(evt);\n        let elt = document.elementFromPoint(x, y);\n        if (mxUtils.isAncestorNode(self.graph.container, elt)) {\n          return self.graph;\n        }\n        return null;\n      };\n      let dragFunct = function(graph, evt, target, x, y) {\n        if (type == "line") {\n          var cell = self.editor.templates["connector"];\n          //设置连线起止点相对坐标\n          cell.geometry.setTerminalPoint(new mxPoint(0, 50), true);\n          cell.geometry.setTerminalPoint(new mxPoint(50, 0), false);\n          cell.edge = true;\n        } else {\n          var cell = self.editor.templates[type];\n          cell.setStyle(\n            "image=" +\n              require("@/assets/images/" + imgMap[`${type}`] + "-finish.png") +\n              ";"\n          );\n          cell.vertex = true;\n        }\n        let cells = graph.importCells([cell], x, y, target);\n        if (cells != null && cells.length > 0) {\n          self.graph.scrollCellToVisible(cells[0]);\n          self.graph.setSelectionCells(cells);\n        }\n      };\n      //拖拽时的图形\n      let dragElt = document.getElementById(icon);\n      mxUtils.makeDraggable(\n        img,\n        self.graph,\n        dragFunct,\n        dragElt,\n        0,\n        0,\n        self.graph.autoscroll,\n        true\n      );\n    },\n')])])]),n("blockquote",[n("p",[e._v("总结")])]),e._v(" "),n("ul",[n("li",[e._v("mxGraph 是第一次使用，虽然是很成熟的一个工具库，但网上资源不是很多，API 文档又是纯英文。很多时候很小的一个功能点需要纠结好久，连搜索都无从下手，只能一遍一遍的看官方 API 文档。")]),e._v(" "),n("li",[e._v("绝大多部分，是为了完成需求实现功能，也无法将代码研究透，停留在会用的基础上。")]),e._v(" "),n("li",[e._v("尽可能直接分享可用的代码段，理论知识我自个儿也还一知半解。")])]),e._v(" "),n("blockquote",[n("p",[e._v("前言")])]),e._v(" "),n("ul",[n("li",[e._v("mxGraph 小结(一)中介绍了 vue 项目中使用 mxGraph 的流程及拖拽功能的实现。细节功能点因篇幅较长，所以本篇重点罗列。")])]),e._v(" "),n("ul",[n("li",[e._v("获取图表对应 xml")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("getXmlCode() {\n  let self = this;\n  let enc = new mxCodec(mxUtils.createXmlDocument());\n  let node = enc.encode(self.graph.getModel());\n  self.xmlCode = mxUtils.getPrettyXml(node);\n},\n")])])]),n("ul",[n("li",[e._v("根据 xml 数据渲染图表")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let node = mxUtils.parseXml(self.graphData);\nlet root = node.documentElement;\nlet decoder = new mxCodec(node);\ndecoder.decode(root, self.graph.getModel());\n")])])]),n("ul",[n("li",[e._v("关于编辑状态")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//可连接\nself.graph.setConnectable(true);\n// 设置节点不可改变大小\nself.graph.setCellsResizable(false);\n//设置节点不可编辑\nself.graph.setCellsEditable(false);\n")])])]),n("ul",[n("li",[e._v("连接自己")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("self.graph.connectionHandler.setCreateTarget(true);\n")])])]),n("ul",[n("li",[e._v("小图预览")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('new mxOutline(self.graph,document.getElementById("mxOutline")\n')])])]),n("ul",[n("li",[e._v("mxUndoManager:撤销操作")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var history = new mxUndoManager();\nvar listener = function(sender, evt)\n{\n\thistory.undoableEditHappened(evt.getProperty('edit'));\n};\ngraph.getModel().addListener(mxEvent.UNDO, listener);\ngraph.getView().addListener(mxEvent.UNDO, listener);\n")])])]),n("ul",[n("li",[e._v("设置快捷键")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let keyHandler = new mxKeyHandler(graph);\nkeyHandler.bindKey(38, function() {//设置向上按钮放大图表\n   graph.zoomIn();\n});\n")])])]),n("ul",[n("li",[e._v("设置悬浮时连接箭头图标")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mxConnectionHandler.prototype.connectImage = new mxImage(require("@/assets/images/connector.gif"),20,20);\n')])])]),n("ul",[n("li",[e._v("悬浮高亮外框")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('new mxCellTracker(self.graph, "#00FF00");\n')])])]),n("p",[e._v("​")])])}),[],!1,null,null,null);t.default=a.exports}}]);